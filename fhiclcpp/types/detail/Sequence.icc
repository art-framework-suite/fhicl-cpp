#include "cetlib/container_algorithms.h"
#include "fhiclcpp/types/detail/ostream_helpers.h"
#include "fhiclcpp/types/detail/type_traits_error_msgs.h"
#include "fhiclcpp/type_traits.h"

#include <string>

namespace fhicl {

  //==================================================================
  // e.g. Sequence<int,4> ====> std::array<int,4>
  //
  template<typename T, std::size_t SIZE>
  Sequence<T,SIZE>::Sequence(Name && name,
                             Comment && cmt )
    : SequenceBase{std::move(name),std::move(cmt),value_type::REQUIRED,par_type::SEQ_ARRAY,this}
    , value_()
    {
      finalize_elements();
      NameStackRegistry::end_of_ctor();
    }

  template<typename T, std::size_t SIZE>
  Sequence<T,SIZE>::Sequence(Name && name,
                             Comment && cmt,
                             Sequence<T,SIZE> const& dflt )
    : SequenceBase{std::move(name),std::move(cmt),value_type::DEFAULT,par_type::SEQ_ARRAY,this}
    , value_(dflt.value_)
    {
      finalize_elements();
      NameStackRegistry::end_of_ctor();
    }

  template<typename T, std::size_t SIZE>
  Sequence<T,SIZE>::Sequence (std::initializer_list<T>  args)
    : SequenceBase{Name::anonymous(), Comment(""), value_type::DEFAULT, par_type::SEQ_ARRAY, this}
    , value_()
    {
      std::size_t i{};
      for (auto const & arg : args) {
        value_.at(i) = tt::fhicl_type<T>{ Name::anonymous(), arg };
        ++i;
      }
      NameStackRegistry::end_of_ctor();
    }

  template<typename T, std::size_t SIZE>
  Sequence<T,SIZE>::Sequence()
    : SequenceBase{Name::anonymous(), Comment(""),value_type::REQUIRED,par_type::SEQ_ARRAY,this}
    , value_()
    {
      // do NOT finalize elements for default sequence!
      NameStackRegistry::end_of_ctor();
    }


  //==================================================================
  // e.g. Sequence<int> ====> std::vector<int>
  //
  template<typename T>
  Sequence<T,-1>::Sequence(Name && name,
                           Comment && cmt )
    : SeqVectorBase{std::move(name), std::move(cmt), value_type::REQUIRED, this}
  {
    value_.resize(1);
    finalize_elements();
    NameStackRegistry::end_of_ctor();
  }

  template<typename T>
  Sequence<T,-1>::Sequence(Name && name,
                           Comment && cmt,
                           Sequence<T,-1> const & dflt )
    : SeqVectorBase{std::move(name), std::move(cmt), value_type::DEFAULT, this}
    , value_(dflt.value_)
    {
      finalize_elements();
      NameStackRegistry::end_of_ctor();
    }

  template<typename T>
  Sequence<T,-1>::Sequence (std::initializer_list<T> args)
    : SeqVectorBase{Name::anonymous(), Comment(""), value_type::DEFAULT, this}
  {
    static_assert(!tt::is_table<T>::value, NO_DEFAULTS_FOR_TABLE);
    cet::transform_all(args, std::back_inserter(value_),
                       [](T const& t) {
                         return tt::fhicl_type<T>{Name::anonymous(), t};
                       } );
    NameStackRegistry::end_of_ctor();
  }

  template<typename T>
  Sequence<T,-1>::Sequence()
    : SeqVectorBase{Name::anonymous(), Comment(""), value_type::REQUIRED, this}
  {
    value_.resize(1);
    // do NOT finalize elements for default sequence!
    NameStackRegistry::end_of_ctor();
  }

}

// Local variables:
// mode: c++
// End:
