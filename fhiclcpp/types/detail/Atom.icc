#include "fhiclcpp/detail/printing_helpers.h"

namespace fhicl {

  template <typename T>
  Atom<T>::Atom(Name&& name,
                Comment&& comment )
    : AtomBase{std::move(name), std::move(comment), value_type::REQUIRED}
    , RegisterIfTableMember{this}
    , value_{std::make_shared<T>()}
  {
    NameStackRegistry::end_of_ctor();
  }

  template <typename T>
  Atom<T>::Atom(Name&& name,
                Comment&& comment,
                T const& dflt_value )
    : AtomBase{std::move(name), std::move(comment), value_type::DEFAULT}
    , RegisterIfTableMember{this}
    , value_{std::make_shared<T>(dflt_value)}
  {
    NameStackRegistry::end_of_ctor();
  }

  template <typename T>
  Atom<T>::Atom(Name&& name)
    : Atom<T>::Atom( std::move(name), Comment("") )
  {}

  template <typename T>
  Atom<T>::Atom(Name&& name, T const& dflt_value)
    : Atom<T>::Atom( std::move(name), Comment(""), dflt_value )
  {}

  template <typename T>
  Atom<T>::Atom(Name&& name, T const& dflt_value, Comment&& comment)
    : Atom<T>::Atom( std::move(name), std::move(comment), dflt_value )
  {}


  template <typename T>
  std::string
  Atom<T>::get_stringified_value() const
  {
    std::stringstream oss;
    if ( has_default() ) {
      using namespace detail::yes_defaults;
      oss << maybe_quotes<T>(*value_) ;
    }
    else {
      using namespace detail::no_defaults;
      oss << expected_types<T>();
    }
    return oss.str();
  }

  template <typename T>
  void
  Atom<T>::do_set_value( fhicl::ParameterSet const & pset, bool const trimParent )
  {
    std::string const& rkey = key();
    std::string const& key = trimParent ? rkey.substr( rkey.find_first_of(".")+1 ) : rkey;

    if ( has_default() )
      pset.get_if_present<T>( key, *value_ );
    else
      value_ = std::make_shared<T>(pset.get<T>( key ));
  }

}

// Local variables:
// mode: c++
// End:
