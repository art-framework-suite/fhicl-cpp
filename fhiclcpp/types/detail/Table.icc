namespace fhicl {

  template <typename T>
  Table<T>::Table(Name && name,
                  Comment && comment )
    : TableBase(std::move(name),std::move(comment),this)
    , value_()
  {
    detail::ParameterRegistrySentry();
  }

  template <typename T>
  Table<T>::Table(Name && name) : Table( std::move(name), Comment("") ) {}

  template <typename T>
  Table<T>::Table()
    : TableBase(Name::anonymous(),Comment(""),this)
    , value_()
  {
    detail::ParameterRegistrySentry();
  }

  template <typename T>
  Table<T>::Table(ParameterSet const& pset, std::set<std::string> const & keysToIgnore)
    : TableBase(Name::anonymous(),Comment(""),this)
    , value_()
  {
    detail::ParameterRegistrySentry();
    validate_ParameterSet( pset, keysToIgnore );
  }

  template <typename T>
  void
  Table<T>::validate_ParameterSet(ParameterSet const& pset, std::set<std::string> const & keysToIgnore)
  {
    detail::validate_ParameterSet( this, pset, keysToIgnore );
  }

  template <typename T>
  void
  Table<T>::print_allowed_configuration(std::ostream& os,
                                        std::string const& tab) const
  {
    detail::print_allowed_configuration(key(), os, false, tab);
  }

  template <typename T>
  void
  Table<T>::do_set_value(fhicl::ParameterSet const& pset, bool const trimParent [[gnu::unused]])
  {
    // Kind of tricky: we do not have the name of the current
    // parameter set.  A placeholder is often used (e.g. "<140>").
    // Fortunately, since the pset is passed in, we can just assign to
    // it for a top-level ParameterSet.  However, for nested parameter
    // sets, we need to trim off the placeholder, and then the key we
    // send pset.get<fhicl::ParameterSet>(key) is the key relative to
    // the top-level pset.
    std::string const& rkey = key();
    std::string const& key  = rkey.substr( rkey.find_first_of(".")+1 );
    pset_ = (key == rkey) ? pset : pset.get<fhicl::ParameterSet>(key,{});
  }

}

// Local variables:
// mode: c++
// End:
