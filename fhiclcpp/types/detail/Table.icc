namespace fhicl {

  template <typename T>
  Table<T>::Table(Name && name,
                  Comment && comment )
    : ParameterBase(std::move(name),std::move(comment),false,par_type::TABLE,this)
    , value_()
  {
    detail::ParameterRegistrySentry();
  }

  template <typename T>
  Table<T>::Table(Name && name) : Table( std::move(name), Comment("") ) {}

  template <typename T>
  Table<T>::Table()
    : ParameterBase(Name::anonymous(),Comment(""),false,par_type::TABLE,this)
    , value_()
  {
    detail::ParameterRegistrySentry();
  }

  template <typename T>
  Table<T>::Table(ParameterSet const& pset, std::set<std::string> const & keysToIgnore)
    : ParameterBase(Name::anonymous(),Comment(""),false,par_type::TABLE,this)
    , value_()
  {
    detail::ParameterRegistrySentry();
    validate_ParameterSet( pset, keysToIgnore );
    set_PSet( pset );
  }

  template <typename T>
  void
  Table<T>::validate_ParameterSet(ParameterSet const& pset, std::set<std::string> const & keysToIgnore)
  {
    detail::validate_ParameterSet( this, pset, keysToIgnore );
  }

  template <typename T>
  void
  Table<T>::print_allowed_configuration(std::ostream& os,
                                        std::string const& tab) const
  {
    detail::print_allowed_configuration(key(), os, false, tab);
  }

}

// Local variables:
// mode: c++
// End:
